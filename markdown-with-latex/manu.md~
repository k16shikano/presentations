今日の大きなテーマは、「Markdownで本を作る」です。
といっても、Markdownは「マークアップ形式のひとつ」でしかないので、それほど込み入った話があるわけではありません。
もし込み入っている要素があるとしたら、マークアップ形式「のひとつ」の部分でしょう。
ご存じのように、Markdownにはたくさんの方言があります。
ここで「方言」というのは、比喩ではなく、文字通り「方言」（dialect）と呼ばれているさまざまな亜種のことです。
コンピューターで扱うようなデータの形式や、あるいはデータの扱い方、つまりプログラムには、仕様とか規格といった約束事と、それに従った実装があります。
仕様とか規格は、通常は人間向けのもので、コンピューターでそのまま処理できる形にはなっていません。
なぜかというと、コンピューターが実際にどんなデータをどう処理すべきかは、コンピューターごとに作り込みが必要だからです。
ただ、まず仕様を人間向けに固めてから実装をする、という流れで作られていないプログラムもいっぱいあります。
使い捨てのスクリプトとかは、いきなりプログラムのコードを書くでしょう。
ちょっとした規模のソフトウェアでも、まずはとりあえず動くモノを作ってみてから細部の仕様を考えていく、ということも少なくないです。
Markdownは、まさにそれで、まずJohn Gruberという人がPerlで書いた「実装」が存在しました。
言い換えると、その実装が、オリジナルのMarkdownの「仕様」だとも言えます。
このオリジナルのMarkdownは、英語圏のメールで使われていた「ちょっとしたASCII記号で装飾したテキスト」をHTMLに変換してWebブラウザで表示するための仕組みです。
Webブラウザ向けのマークアップといったらHTMLですが、HTMLを人間が手書きすると面倒だし意図しないタグの間違いも発生しやすくなります。
タグは機械、つまりコンピューターが読むものなので、間違いがあればコンピューターによる解釈にも問題を引き起こします。
見た目が崩れるだけならともかく、「HTMLの構造は壊れてるけど見た目だけはブラウザがなんとかしてくれている」という状況はもっとも避けたいところです。
そこで、「ちょっとしたASCII記号による装飾」をプログラムによってHTMLの "かっちりした" 構造にしたい、という動機が生まれるわけです。
同じような背景の発想をもつものとして、Wiki記法や、reST記法といったものがあります。
プログラムのソースコードから自動でリファレンスマニュアルを生成するのも、言ってみれば同じ発想ですね。
ただ、ソースコードからのドキュメント生成については、手間を省きたいという側面のほうが大きいかもしれません。
もちろん、Wiki記法やreST記法も手間を省く要素は大きいですが、構造を制限するという側面もそれなりにあるというわけです。
は何なのか、という視点で
構造とスタイルの分離は単純なレイヤわけができない
	はしごが何本もある
	たぶん、多くの分野で、レイヤはそうなる運命にある
Pandocは、LaTeXをレイアウト層としたMarkdownのエコシステムになりつつある
Pandocではフィルターでいろいろ調整できる
多くの人が気にしないケースへの対応が、プロの要求にかなうとは限らない
	セクションへの\texorpdfstringのケース
	こういうのはパッチ化してPRだしづらい
